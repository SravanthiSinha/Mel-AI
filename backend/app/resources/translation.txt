"Bonjour et bienvenue. La semaine dernière, vous avez appris sur les RNN, les GRU et les LSTMs. Cette semaine, vous verrez comment beaucoup de ces idées peuvent être appliquées au TALN, au Traitement Automatique du Langage Naturel, qui est l'un des domaines de l'IA qui est vraiment révolutionné par l'apprentissage profond. Une des idées clés que vous apprendrez est les plongements de mots, qui est une façon de représenter les mots qui permet à vos algorithmes de comprendre automatiquement des analogies comme celle-ci, homme est à femme comme roi est à reine, et de nombreux autres exemples. À travers ces idées de plongements de mots, vous serez capable de construire des applications de TALN même avec une taille de jeu de données modeste ou même avec des ensembles d'entraînement de petites tailles. Enfin, vers la fin de la semaine, vous verrez comment dé-biaiser les plongements de mots afin de réduire les biais indésirables liés au genre, à l'ethnie ou à d'autres types de biais que les algorithmes d'apprentissage peuvent parfois acquérir. Alors, commençons une discussion sur la représentation des mots. Jusqu'à présent, nous avons représenté les mots en utilisant un vocabulaire de mots, et notre vocabulaire de la semaine précédente pourrait être, disons, 10 000 mots. Et nous avons représenté les mots en utilisant un vecteur one-hot. Donc, par exemple, si homme est le mot numéro 5391 dans ce dictionnaire, alors vous le représentez avec un vecteur avec un un à la position 5391. Et je vais aussi utiliser O en indice 5391 pour représenter ce vecteur où O ici signifie one-hot. Et puis si femme est le mot numéro 9853, alors vous le représentez avec O en indice 9853, qui a juste un un à la position 9853 et des zéros ailleurs. Et puis d'autres mots, roi, reine, pomme, orange seraient également représentés de la même manière avec des vecteurs one-hot. Une des faiblesses de cette représentation est qu'elle traite chaque mot comme une entité en soi et ne permet pas à un algorithme de généraliser facilement à travers les mots. Par exemple, disons que vous avez un modèle de langage qui a appris que lorsque vous voyez Je veux un verre de jus d'orange, eh bien, quel mot pensez-vous que ce sera ensuite ? Très probablement jus. Mais même si l'algorithme d'apprentissage a appris que Je veux un verre de jus d'orange est une phrase probable, s'il voit Je veux un verre de jus de pomme, pour autant qu'il sache, la relation entre pomme et orange n'est pas plus proche que la relation entre n'importe quel autre mot, homme, femme, roi, reine et orange. Et donc ce n'est pas facile pour l'algorithme d'apprentissage de généraliser à partir du fait que le jus d'orange est une chose populaire à reconnaître rapidement que le jus de pomme pourrait aussi être une chose populaire ou une phrase populaire. Et c'est parce que le produit scalaire entre deux vecteurs one-hot différents est zéro. Si vous prenez deux vecteurs, disons, reine et roi et que vous les multipliez, le produit scalaire est zéro. Si vous prenez pomme et orange et le produit scalaire entre eux, le produit scalaire est zéro. Et la distance euclidienne entre chaque paire de ces vecteurs est également la même. Donc il ne sait tout simplement pas que d'une certaine manière pomme et orange sont beaucoup plus similaires que roi et orange ou reine et orange. Alors ne serait-il pas bien si au lieu d'une représentation one-hot, nous pouvions plutôt apprendre une représentation featurisée où pour chacun de ces mots, homme, femme, roi, reine, pomme, orange, ou vraiment pour chaque mot dans un dictionnaire, nous pourrions apprendre un ensemble de caractéristiques et de valeurs pour chacun d'eux. Donc par exemple, chacun de ces mots pourrait avoir, nous voulons savoir, quel est le genre associé à chacune de ces choses. Donc, le genre va de moins un pour masculin à plus un pour féminin, alors le genre associé à homme pourrait être moins un, pour femme pourrait être plus un, et puis si vous apprenez réellement ces choses, peut-être pour roi vous obtenez moins 0,95, pour reine plus 0,97, et pour pomme et orange, vous savez, plutôt sans genre. Une autre caractéristique pourrait être, eh bien, à quel point ces choses sont royales ? Et donc, les termes homme et femme ne sont pas particulièrement royaux, donc ils pourraient avoir des valeurs de caractéristiques proches de zéro, alors que roi et reine sont très royaux, et pomme et orange ne sont pas particulièrement royaux. Et l'âge ? Eh bien, homme et femme ne connotent pas grand-chose sur l'âge. Peut-être que homme et femme impliquent qu'ils sont adultes, mais peut-être ni jeunes ni vieux, donc peut-être des valeurs proches de zéro, alors que les rois et les reines sont presque toujours des adultes et pomme et orange pourraient être plus neutres par rapport à l'âge et puis une autre caractéristique pour savoir si c'est un aliment et eh bien homme n'est pas un aliment, femme n'est pas un aliment, ni les rois ni les reines mais les pommes et les oranges sont des aliments. Et il peut y avoir beaucoup d'autres caractéristiques également, allant de quelle est la taille de ceci, quel est le coût, est-ce quelque chose de vivant, est-ce une action, ou est-ce un nom, ou est-ce un verbe, ou est-ce quelque chose d'autre, et ainsi de suite. Donc vous pouvez imaginer venir avec beaucoup de caractéristiques, et pour l'illustration, disons 300 caractéristiques différentes, et ce que cela permet, c'est de prendre cette liste de nombres, je n'en ai écrit que quatre ici, mais cela pourrait être une liste de peut-être 300 nombres, qui devient alors un vecteur de 300 dimensions pour représenter le mot homme. Et je vais utiliser la notation E en indice 5391 pour désigner une représentation comme celle-ci. Et de même, ce vecteur, ce vecteur de 300 dimensions ou un vecteur de 300 dimensions comme celui-ci, je le noterais E9853 pour désigner un vecteur de 300 dimensions que nous pourrions utiliser pour représenter le mot femme. Et de même, pour les autres exemples ici. Maintenant, si vous utilisez cette représentation pour représenter les mots orange et pomme, alors remarquez que les représentations pour orange et pomme sont maintenant assez similaires. Certaines des caractéristiques différeront car peut-être la couleur d'une orange, la couleur d'une pomme, le goût ou d'autres caractéristiques différeront. Mais dans l'ensemble, beaucoup de caractéristiques de la pomme et de l'orange sont en fait les mêmes ou prennent des valeurs très similaires. Cela augmente les chances de l'algorithme d'apprentissage qui a compris que le jus d'orange est une chose de comprendre également rapidement que le jus de pomme est une chose. Donc cela lui permet de généraliser mieux à travers différents mots. Au cours des prochaines vidéos, nous trouverons un moyen d'apprendre des plongements de mots, qui est essentiellement d'apprendre des vecteurs de caractéristiques de haute dimension comme ceux-ci qui donnent une meilleure représentation que les vecteurs one-hot pour représenter différents mots. Les caractéristiques que nous finirons par apprendre n'auront pas une interprétation facile à comprendre comme quoi le composant un est le genre, le composant deux est royal, le composant trois est asiatique et ainsi de suite. Exactement ce qu'ils représentent sera un peu plus difficile à comprendre, mais néanmoins, les représentations featurisées que nous apprendrons permettront à un algorithme de comprendre rapidement que la pomme et l'orange sont plus similaires que disons, le roi et l'orange ou la reine et l'orange. Si nous sommes capables d'apprendre un vecteur de caractéristiques de 300 dimensions ou un plongement de 300 dimensions pour chaque mot, l'une des choses populaires à faire est également de prendre ces données de 300 dimensions et de les incorporer, disons, dans un espace à deux dimensions pour que vous puissiez les visualiser. Et donc un algorithme commun pour faire cela est l'algorithme t-SNE de Lauren van der Maarten et Jeff Hinton. Et si vous regardez une de ces représentations, vous constatez que des mots comme homme et femme ont tendance à être regroupés ensemble, roi et reine ont tendance à être regroupés ensemble, et ce sont les personnes qui ont tendance à être regroupées ensemble, ce sont les animaux qui ont tendance à être regroupés ensemble, les fruits auront tendance à être proches les uns des autres, les nombres comme 1, 2, 3, 4 seront proches les uns des autres, et puis peut-être les objets animés dans leur ensemble auront également tendance à être regroupés ensemble. Mais vous voyez parfois des graphiques comme ceux-ci sur Internet pour visualiser certains de ces plongements de 300 dimensions ou plus. Peut-être que cela vous donne une idée que les algorithmes de plongement de mots comme ceux-ci peuvent apprendre des caractéristiques similaires pour des concepts qui semblent être plus liés, comme visualisé par ce concept qui vous semble à vous et à moi qu'ils devraient être plus similaires, finissent par être cartographiés vers des vecteurs de caractéristiques plus similaires. Et ces représentations, nous utiliserons ces représentations featurisées dans peut-être un espace de 300 dimensions, appelées plongements et la raison pour laquelle nous les appelons plongements est que vous pouvez penser à un espace de 300 dimensions et encore une fois ils ne peuvent pas dessiner d'espaces de 300 dimensions peut-être que c'est un espace en 3D et ce que vous faites c'est que vous prenez chaque mot comme orange et vous savez avez un vecteur de caractéristiques de 300 dimensions donc le mot orange est incorporé à un point dans cet espace de 300 dimensions et le mot pomme est incorporé à un point différent dans cet espace de 300 dimensions et bien sûr pour visualiser cela les algorithmes comme t-SNE vont mapper cela vers un espace de dimension beaucoup plus basse vous pouvez réellement tracer les données en 2D et les regarder mais c'est là que le terme plongement vient des Plongements de mots a été l'une des idées les plus importantes en TALN, en Traitement Automatique du Langage Naturel. Dans cette vidéo, vous avez vu pourquoi vous pourriez vouloir apprendre ou utiliser des plongements de mots. Dans la prochaine vidéo, regardons de plus près comment vous pourrez utiliser ces algorithmes pour construire des algorithmes de TALN."